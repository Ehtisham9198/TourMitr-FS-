{"version":3,"file":"operations.js","sourceRoot":"","sources":["../../../src/api/operations.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport {\n  CompletionsOptions,\n  Completions,\n  ChatCompletionsOptions,\n  ChatCompletions,\n  ImageGenerationOptions,\n  ImageGenerations,\n  EmbeddingsOptions,\n  Embeddings,\n  ChatRequestMessageUnion,\n  EventStream,\n  ContentFilterResultsForChoice,\n  ContentFilterResultDetailsForPrompt,\n  ContentFilterResultsForPrompt,\n} from \"../models/models.js\";\nimport {\n  serializeChatRequestMessageUnion,\n  serializeAzureChatExtensionConfigurationUnion,\n} from \"../utils/serializeUtil.js\";\nimport {\n  GetChatCompletions200Response,\n  GetChatCompletionsDefaultResponse,\n  GetCompletions200Response,\n  GetCompletionsDefaultResponse,\n  GetEmbeddings200Response,\n  GetEmbeddingsDefaultResponse,\n  GetImageGenerations200Response,\n  GetImageGenerationsDefaultResponse,\n  isUnexpected,\n  OpenAIContext as Client,\n  ContentFilterResultsForChoiceOutput,\n  ContentFilterResultDetailsForPromptOutput,\n  ContentFilterResultsForPromptOutput,\n  ChatCompletionsOutput,\n  CompletionsOutput,\n} from \"../rest/index.js\";\nimport {\n  StreamableMethod,\n  operationOptionsToRequestParameters,\n  ErrorModel,\n} from \"@azure-rest/core-client\";\nimport {\n  GetCompletionsOptions,\n  GetChatCompletionsOptions,\n  GetEmbeddingsOptions,\n  GetImagesOptions,\n  GetImageGenerationsOptions,\n  GeneratedGetChatCompletionsOptions,\n} from \"../models/options.js\";\nimport { getOaiSSEs } from \"./oaiSse.js\";\nimport { createFile } from \"@azure/core-rest-pipeline\";\nimport {\n  GetAudioTranscriptionOptions,\n  AudioResultSimpleJson,\n  AudioResultFormat,\n  AudioResult,\n  GetAudioTranslationOptions,\n} from \"../models/audio.js\";\nimport { snakeCaseKeys, camelCaseKeys } from \"./util.js\";\n\n/**\n * Returns the transcription of an audio file in a simple JSON format.\n * @param context - The context containing the client to use for this request.\n * @param deploymentName - The name of the model deployment (when using Azure OpenAI) or model name (when using non-Azure OpenAI) to use for this request.\n * @param fileContent - The content of the audio file to transcribe.\n * @param options - The options for this audio transcription request.\n * @returns The audio transcription result in a simple JSON format.\n */\nexport async function getAudioTranscription(\n  context: Client,\n  deploymentName: string,\n  fileContent: Uint8Array,\n  options?: GetAudioTranscriptionOptions,\n): Promise<AudioResultSimpleJson>;\n/**\n * Returns the transcription of an audio file.\n * @param context - The context containing the client to use for this request.\n * @param deploymentName - The name of the model deployment (when using Azure OpenAI) or model name (when using non-Azure OpenAI) to use for this request.\n * @param fileContent - The content of the audio file to transcribe.\n * @param format - The format of the result object. See {@link AudioResultFormat} for possible values.\n * @param options - The options for this audio transcription request.\n * @returns The audio transcription result in a format of your choice.\n */\nexport async function getAudioTranscription<Format extends AudioResultFormat>(\n  context: Client,\n  deploymentName: string,\n  fileContent: Uint8Array,\n  format: Format,\n  options?: GetAudioTranscriptionOptions,\n): Promise<AudioResult<Format>>;\n// implementation\nexport async function getAudioTranscription<Format extends AudioResultFormat>(\n  context: Client,\n  deploymentName: string,\n  fileContent: Uint8Array,\n  formatOrOptions?: Format | GetAudioTranscriptionOptions,\n  inputOptions?: GetAudioTranscriptionOptions,\n): Promise<AudioResult<Format>> {\n  const options =\n    inputOptions ?? (typeof formatOrOptions === \"string\" ? {} : formatOrOptions ?? {});\n  const response_format = typeof formatOrOptions === \"string\" ? formatOrOptions : undefined;\n  const { abortSignal, onResponse, requestOptions, tracingOptions, ...rest } = options;\n  const { body, status } = await context\n    .pathUnchecked(\"deployments/{deploymentName}/audio/transcriptions\", deploymentName)\n    .post({\n      ...operationOptionsToRequestParameters({\n        abortSignal,\n        onResponse,\n        tracingOptions,\n        requestOptions,\n      }),\n      contentType: \"multipart/form-data\",\n      body: {\n        ...snakeCaseKeys(rest),\n        file: createFile(fileContent, \"placeholder.wav\"),\n        ...(response_format ? { response_format } : {}),\n      },\n    });\n  if (status !== \"200\") {\n    throw body.error;\n  }\n  return response_format !== \"verbose_json\"\n    ? body\n    : (camelCaseKeys(body) as unknown as AudioResult<Format>);\n}\n\n/**\n * Returns the translation of an audio file.\n * @param context - The context containing the client to use for this request.\n * @param deploymentName - The name of the model deployment (when using Azure OpenAI) or model name (when using non-Azure OpenAI) to use for this request.\n * @param fileContent - The content of the audio file to translate.\n * @param options - The options for this audio translation request.\n * @returns The audio translation result.\n */\nexport async function getAudioTranslation(\n  context: Client,\n  deploymentName: string,\n  fileContent: Uint8Array,\n  options?: GetAudioTranslationOptions,\n): Promise<AudioResultSimpleJson>;\n/**\n * Returns the translation of an audio file.\n * @param context - The context containing the client to use for this request.\n * @param deploymentName - The name of the model deployment (when using Azure OpenAI) or model name (when using non-Azure OpenAI) to use for this request.\n * @param fileContent - The content of the audio file to translate.\n * @param format - The format of the result object. See {@link AudioResultFormat} for possible values.\n * @param options - The options for this audio translation request.\n * @returns The audio translation result.\n */\nexport async function getAudioTranslation<Format extends AudioResultFormat>(\n  context: Client,\n  deploymentName: string,\n  fileContent: Uint8Array,\n  format: Format,\n  options?: GetAudioTranslationOptions,\n): Promise<AudioResult<Format>>;\n// implementation\nexport async function getAudioTranslation<Format extends AudioResultFormat>(\n  context: Client,\n  deploymentName: string,\n  fileContent: Uint8Array,\n  formatOrOptions?: Format | GetAudioTranslationOptions,\n  inputOptions?: GetAudioTranslationOptions,\n): Promise<AudioResult<Format>> {\n  const options =\n    inputOptions ?? (typeof formatOrOptions === \"string\" ? {} : formatOrOptions ?? {});\n  const response_format = typeof formatOrOptions === \"string\" ? formatOrOptions : undefined;\n  const { abortSignal, onResponse, requestOptions, tracingOptions, ...rest } = options;\n  const { body, status } = await context\n    .pathUnchecked(\"deployments/{deploymentName}/audio/translations\", deploymentName)\n    .post({\n      ...operationOptionsToRequestParameters({\n        abortSignal,\n        onResponse,\n        tracingOptions,\n        requestOptions,\n      }),\n      contentType: \"multipart/form-data\",\n      body: {\n        ...snakeCaseKeys(rest),\n        file: createFile(fileContent, \"placeholder.wav\"),\n        ...(response_format ? { response_format } : {}),\n      },\n    });\n  if (status !== \"200\") {\n    throw body.error;\n  }\n  return response_format !== \"verbose_json\"\n    ? body\n    : (camelCaseKeys(body) as unknown as AudioResult<Format>);\n}\n\nexport function _getCompletionsSend(\n  context: Client,\n  deploymentId: string,\n  body: CompletionsOptions,\n  options: GetCompletionsOptions = { requestOptions: {} },\n): StreamableMethod<GetCompletions200Response | GetCompletionsDefaultResponse> {\n  return context.path(\"/deployments/{deploymentId}/completions\", deploymentId).post({\n    ...operationOptionsToRequestParameters(options),\n    body: {\n      prompt: body[\"prompt\"],\n      max_tokens: body[\"maxTokens\"],\n      temperature: body[\"temperature\"],\n      top_p: body[\"topP\"],\n      logit_bias: body[\"logitBias\"],\n      user: body[\"user\"],\n      n: body[\"n\"],\n      logprobs: body[\"logprobs\"],\n      suffix: body[\"suffix\"],\n      echo: body[\"echo\"],\n      stop: body[\"stop\"],\n      presence_penalty: body[\"presencePenalty\"],\n      frequency_penalty: body[\"frequencyPenalty\"],\n      best_of: body[\"bestOf\"],\n      stream: body[\"stream\"],\n      model: body[\"model\"],\n    },\n  });\n}\n\nexport async function _getCompletionsDeserialize(\n  result: GetCompletions200Response | GetCompletionsDefaultResponse,\n): Promise<Completions> {\n  if (isUnexpected(result)) {\n    throw result.body.error;\n  }\n\n  return getCompletionsResult(result.body);\n}\n\nexport function getCompletionsResult(\n  body: CompletionsOutput & ContentFilterResultsForPromptX,\n): Completions {\n  const { created, choices, prompt_filter_results, prompt_annotations, ...rest } = body;\n  return {\n    ...camelCaseKeys(rest),\n    created: new Date(created),\n    ...{\n      promptFilterResults: getContentFilterResultsForPrompt({\n        prompt_filter_results,\n        prompt_annotations,\n      }),\n    },\n    choices: choices.map(({ content_filter_results, ...choice }) => ({\n      ...camelCaseKeys(choice),\n      ...(!content_filter_results\n        ? {}\n        : {\n            contentFilterResults: parseContentFilterResultsForChoiceOutput(content_filter_results),\n          }),\n    })),\n  };\n}\n\n/**\n * Gets completions for the provided input prompts.\n * Completions support a wide variety of tasks and generate text that continues from or \"completes\"\n * provided prompt data.\n */\nexport async function getCompletions(\n  context: Client,\n  deploymentId: string,\n  body: CompletionsOptions,\n  options: GetCompletionsOptions = { requestOptions: {} },\n): Promise<Completions> {\n  const result = await _getCompletionsSend(context, deploymentId, body, options);\n  return _getCompletionsDeserialize(result);\n}\n\nexport function streamCompletions(\n  context: Client,\n  deploymentName: string,\n  prompt: string[],\n  options: GetCompletionsOptions = { requestOptions: {} },\n): Promise<EventStream<Omit<Completions, \"usage\">>> {\n  const { abortSignal, onResponse, requestOptions, tracingOptions, ...rest } = options;\n  const response = _getCompletionsSend(\n    context,\n    deploymentName,\n    {\n      prompt,\n      ...rest,\n      stream: true,\n    },\n    { abortSignal, onResponse, requestOptions, tracingOptions },\n  );\n  return getOaiSSEs(response, getCompletionsResult);\n}\n\nexport function _getChatCompletionsSend(\n  context: Client,\n  deploymentId: string,\n  body: ChatCompletionsOptions,\n  options: GeneratedGetChatCompletionsOptions = { requestOptions: {} },\n): StreamableMethod<GetChatCompletions200Response | GetChatCompletionsDefaultResponse> {\n  return context.path(\"/deployments/{deploymentId}/chat/completions\", deploymentId).post({\n    ...operationOptionsToRequestParameters(options),\n    body: {\n      model: body[\"model\"],\n      stream: body[\"stream\"],\n      max_tokens: body[\"maxTokens\"],\n      temperature: body[\"temperature\"],\n      top_p: body[\"topP\"],\n      logit_bias: body[\"logitBias\"],\n      user: body[\"user\"],\n      n: body[\"n\"],\n      stop: body[\"stop\"],\n      presence_penalty: body[\"presencePenalty\"],\n      frequency_penalty: body[\"frequencyPenalty\"],\n      data_sources:\n        body[\"dataSources\"] === undefined\n          ? body[\"dataSources\"]\n          : body[\"dataSources\"].map((p) => serializeAzureChatExtensionConfigurationUnion(p)),\n      enhancements: !body.enhancements\n        ? undefined\n        : {\n            grounding: !body.enhancements?.grounding\n              ? undefined\n              : { enabled: body.enhancements?.grounding?.[\"enabled\"] },\n            ocr: !body.enhancements?.ocr\n              ? undefined\n              : { enabled: body.enhancements?.ocr?.[\"enabled\"] },\n          },\n      seed: body[\"seed\"],\n      logprobs: body[\"logprobs\"],\n      top_logprobs: body[\"topLogprobs\"],\n      response_format: !body.responseFormat ? undefined : { type: body.responseFormat?.[\"type\"] },\n      tool_choice: body[\"toolChoice\"],\n      tools: body[\"tools\"],\n      functions:\n        body[\"functions\"] === undefined\n          ? body[\"functions\"]\n          : body[\"functions\"].map((p) => ({\n              name: p[\"name\"],\n              description: p[\"description\"],\n              parameters: p[\"parameters\"],\n            })),\n      function_call: body[\"functionCall\"],\n      messages: body[\"messages\"].map((p) => serializeChatRequestMessageUnion(p)),\n    },\n  });\n}\n\nexport async function _getChatCompletionsDeserialize(\n  result: GetChatCompletions200Response | GetChatCompletionsDefaultResponse,\n): Promise<ChatCompletions> {\n  if (isUnexpected(result)) {\n    throw result.body.error;\n  }\n\n  return getChatCompletionsResult(result.body);\n}\n\nexport function getChatCompletionsResult(\n  body: ChatCompletionsOutput & ContentFilterResultsForPromptX,\n): ChatCompletions {\n  const { created, choices, prompt_filter_results, prompt_annotations, usage, ...rest } = body;\n  return {\n    ...camelCaseKeys(rest),\n    created: new Date(created),\n    ...{\n      promptFilterResults: getContentFilterResultsForPrompt({\n        prompt_filter_results,\n        prompt_annotations,\n      }),\n    },\n    ...(!usage\n      ? {}\n      : {\n          usage: {\n            completionTokens: usage[\"completion_tokens\"],\n            promptTokens: usage[\"prompt_tokens\"],\n            totalTokens: usage[\"total_tokens\"],\n          },\n        }),\n    choices: !choices\n      ? []\n      : choices.map(({ content_filter_results, ...choice }) => ({\n          ...camelCaseKeys(choice),\n          ...(!content_filter_results\n            ? {}\n            : {\n                contentFilterResults:\n                  parseContentFilterResultsForChoiceOutput(content_filter_results),\n              }),\n        })),\n  };\n}\n\n/**\n * Gets chat completions for the provided chat messages.\n * Completions support a wide variety of tasks and generate text that continues from or \"completes\"\n * provided prompt data.\n */\nexport async function getChatCompletions(\n  context: Client,\n  deploymentName: string,\n  messages: ChatRequestMessageUnion[],\n  options: GetChatCompletionsOptions = { requestOptions: {} },\n): Promise<ChatCompletions> {\n  const result = await _getChatCompletionsSendX(context, deploymentName, messages, options);\n  return _getChatCompletionsDeserialize(result);\n}\n\nfunction _getChatCompletionsSendX(\n  context: Client,\n  deploymentName: string,\n  messages: ChatRequestMessageUnion[],\n  options: GetChatCompletionsOptions & { stream?: boolean } = { requestOptions: {} },\n): StreamableMethod<GetChatCompletions200Response | GetChatCompletionsDefaultResponse> {\n  const {\n    azureExtensionOptions,\n    abortSignal,\n    onResponse,\n    requestOptions,\n    tracingOptions,\n    ...rest\n  } = options;\n  const coreOptions = {\n    abortSignal,\n    onResponse,\n    requestOptions,\n    tracingOptions,\n  };\n  const azure = {\n    ...(!azureExtensionOptions?.extensions\n      ? {}\n      : { dataSources: azureExtensionOptions.extensions }),\n    ...(!azureExtensionOptions?.enhancements\n      ? {}\n      : { enhancements: azureExtensionOptions.enhancements }),\n  };\n  return _getChatCompletionsSend(\n    context,\n    deploymentName,\n    { messages, ...rest, ...azure },\n    coreOptions,\n  );\n}\n\nexport function streamChatCompletions(\n  context: Client,\n  deploymentName: string,\n  messages: ChatRequestMessageUnion[],\n  options: GetChatCompletionsOptions = { requestOptions: {} },\n): Promise<EventStream<ChatCompletions>> {\n  const response = _getChatCompletionsSendX(context, deploymentName, messages, {\n    ...options,\n    stream: true,\n  });\n  return getOaiSSEs(response, getChatCompletionsResult);\n}\n\nexport function _getImageGenerationsSend(\n  context: Client,\n  deploymentId: string,\n  body: ImageGenerationOptions,\n  options: GetImageGenerationsOptions = { requestOptions: {} },\n): StreamableMethod<GetImageGenerations200Response | GetImageGenerationsDefaultResponse> {\n  return context.path(\"/deployments/{deploymentId}/images/generations\", deploymentId).post({\n    ...operationOptionsToRequestParameters(options),\n    body: {\n      model: body[\"model\"],\n      prompt: body[\"prompt\"],\n      n: body[\"n\"],\n      size: body[\"size\"],\n      response_format: body[\"responseFormat\"],\n      quality: body[\"quality\"],\n      style: body[\"style\"],\n      user: body[\"user\"],\n    },\n  });\n}\n\nexport async function _getImageGenerationsDeserialize(\n  result: GetImageGenerations200Response | GetImageGenerationsDefaultResponse,\n): Promise<ImageGenerations> {\n  if (isUnexpected(result)) {\n    throw result.body.error;\n  }\n\n  return {\n    created: new Date(result.body[\"created\"]),\n    data: result.body[\"data\"].map((p) => ({\n      url: p[\"url\"],\n      base64Data: p[\"b64_json\"],\n      contentFilterResults: !p.content_filter_results\n        ? undefined\n        : {\n            sexual: !p.content_filter_results?.sexual\n              ? undefined\n              : {\n                  severity: p.content_filter_results?.sexual?.[\"severity\"],\n                  filtered: p.content_filter_results?.sexual?.[\"filtered\"],\n                },\n            violence: !p.content_filter_results?.violence\n              ? undefined\n              : {\n                  severity: p.content_filter_results?.violence?.[\"severity\"],\n                  filtered: p.content_filter_results?.violence?.[\"filtered\"],\n                },\n            hate: !p.content_filter_results?.hate\n              ? undefined\n              : {\n                  severity: p.content_filter_results?.hate?.[\"severity\"],\n                  filtered: p.content_filter_results?.hate?.[\"filtered\"],\n                },\n            selfHarm: !p.content_filter_results?.self_harm\n              ? undefined\n              : {\n                  severity: p.content_filter_results?.self_harm?.[\"severity\"],\n                  filtered: p.content_filter_results?.self_harm?.[\"filtered\"],\n                },\n          },\n      revisedPrompt: p[\"revised_prompt\"],\n      promptFilterResults: !p.prompt_filter_results\n        ? undefined\n        : {\n            sexual: !p.prompt_filter_results?.sexual\n              ? undefined\n              : {\n                  severity: p.prompt_filter_results?.sexual?.[\"severity\"],\n                  filtered: p.prompt_filter_results?.sexual?.[\"filtered\"],\n                },\n            violence: !p.prompt_filter_results?.violence\n              ? undefined\n              : {\n                  severity: p.prompt_filter_results?.violence?.[\"severity\"],\n                  filtered: p.prompt_filter_results?.violence?.[\"filtered\"],\n                },\n            hate: !p.prompt_filter_results?.hate\n              ? undefined\n              : {\n                  severity: p.prompt_filter_results?.hate?.[\"severity\"],\n                  filtered: p.prompt_filter_results?.hate?.[\"filtered\"],\n                },\n            selfHarm: !p.prompt_filter_results?.self_harm\n              ? undefined\n              : {\n                  severity: p.prompt_filter_results?.self_harm?.[\"severity\"],\n                  filtered: p.prompt_filter_results?.self_harm?.[\"filtered\"],\n                },\n            profanity: !p.prompt_filter_results?.profanity\n              ? undefined\n              : {\n                  filtered: p.prompt_filter_results?.profanity?.[\"filtered\"],\n                  detected: p.prompt_filter_results?.profanity?.[\"detected\"],\n                },\n            jailbreak: !p.prompt_filter_results?.jailbreak\n              ? undefined\n              : {\n                  filtered: p.prompt_filter_results?.jailbreak?.[\"filtered\"],\n                  detected: p.prompt_filter_results?.jailbreak?.[\"detected\"],\n                },\n          },\n    })),\n  };\n}\n\n/** Creates an image given a prompt. */\nexport async function getImageGenerations(\n  context: Client,\n  deploymentId: string,\n  body: ImageGenerationOptions,\n  options: GetImagesOptions = { requestOptions: {} },\n): Promise<ImageGenerations> {\n  const result = await _getImageGenerationsSend(context, deploymentId, body, options);\n  return _getImageGenerationsDeserialize(result);\n}\n\nexport function _getEmbeddingsSend(\n  context: Client,\n  deploymentId: string,\n  body: EmbeddingsOptions,\n  options: GetEmbeddingsOptions = { requestOptions: {} },\n): StreamableMethod<GetEmbeddings200Response | GetEmbeddingsDefaultResponse> {\n  return context.path(\"/deployments/{deploymentId}/embeddings\", deploymentId).post({\n    ...operationOptionsToRequestParameters(options),\n    body: {\n      user: body[\"user\"],\n      model: body[\"model\"],\n      input: body[\"input\"],\n      dimensions: body[\"dimensions\"],\n    },\n  });\n}\n\nexport async function _getEmbeddingsDeserialize(\n  result: GetEmbeddings200Response | GetEmbeddingsDefaultResponse,\n): Promise<Embeddings> {\n  if (isUnexpected(result)) {\n    throw result.body.error;\n  }\n\n  return {\n    data: result.body[\"data\"].map((p) => ({\n      embedding: p[\"embedding\"],\n      index: p[\"index\"],\n    })),\n    usage: {\n      promptTokens: result.body.usage[\"prompt_tokens\"],\n      totalTokens: result.body.usage[\"total_tokens\"],\n    },\n  };\n}\n\n/** Return the embeddings for a given prompt. */\nexport async function getEmbeddings(\n  context: Client,\n  deploymentId: string,\n  body: EmbeddingsOptions,\n  options: GetEmbeddingsOptions = { requestOptions: {} },\n): Promise<Embeddings> {\n  const result = await _getEmbeddingsSend(context, deploymentId, body, options);\n  return _getEmbeddingsDeserialize(result);\n}\n\ntype ContentFilterResultsForPromptX = {\n  prompt_filter_results?: Array<ContentFilterResultsForPromptOutput>;\n  prompt_annotations?: Array<ContentFilterResultsForPromptOutput>;\n};\n\nfunction getContentFilterResultsForPrompt({\n  prompt_annotations,\n  prompt_filter_results,\n}: ContentFilterResultsForPromptX): ContentFilterResultsForPrompt[] | undefined {\n  const res = prompt_filter_results ?? prompt_annotations;\n  return res?.map(({ content_filter_results, ...rest }) => ({\n    ...camelCaseKeys(rest),\n    contentFilterResults: parseContentFilterResultDetailsForPromptOutput(content_filter_results),\n  }));\n}\n\nfunction parseContentFilterResultDetailsForPromptOutput({\n  error,\n  ...rest\n}: ContentFilterResultDetailsForPromptOutput = {}): ContentFilterResultDetailsForPrompt {\n  return error ? parseError(error) : camelCaseKeys(rest);\n}\n\nfunction parseError(error: ErrorModel): { error: ErrorModel } {\n  return {\n    error: {\n      ...error,\n      details: error[\"details\"] ?? [],\n    },\n  };\n}\n\nfunction parseContentFilterResultsForChoiceOutput({\n  error,\n  ...successResult\n}: ContentFilterResultsForChoiceOutput = {}): ContentFilterResultsForChoice {\n  return error\n    ? {\n        error: {\n          ...error,\n          details: error[\"details\"] ?? [],\n        },\n      }\n    : camelCaseKeys(successResult);\n}\n"]}