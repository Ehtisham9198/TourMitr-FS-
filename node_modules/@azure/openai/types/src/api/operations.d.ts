import { CompletionsOptions, Completions, ChatCompletionsOptions, ChatCompletions, ImageGenerationOptions, ImageGenerations, EmbeddingsOptions, Embeddings, ChatRequestMessageUnion, EventStream } from "../models/models.js";
import { GetChatCompletions200Response, GetChatCompletionsDefaultResponse, GetCompletions200Response, GetCompletionsDefaultResponse, GetEmbeddings200Response, GetEmbeddingsDefaultResponse, GetImageGenerations200Response, GetImageGenerationsDefaultResponse, OpenAIContext as Client, ContentFilterResultsForPromptOutput, ChatCompletionsOutput, CompletionsOutput } from "../rest/index.js";
import { StreamableMethod } from "@azure-rest/core-client";
import { GetCompletionsOptions, GetChatCompletionsOptions, GetEmbeddingsOptions, GetImagesOptions, GetImageGenerationsOptions, GeneratedGetChatCompletionsOptions } from "../models/options.js";
import { GetAudioTranscriptionOptions, AudioResultSimpleJson, AudioResultFormat, AudioResult, GetAudioTranslationOptions } from "../models/audio.js";
/**
 * Returns the transcription of an audio file in a simple JSON format.
 * @param context - The context containing the client to use for this request.
 * @param deploymentName - The name of the model deployment (when using Azure OpenAI) or model name (when using non-Azure OpenAI) to use for this request.
 * @param fileContent - The content of the audio file to transcribe.
 * @param options - The options for this audio transcription request.
 * @returns The audio transcription result in a simple JSON format.
 */
export declare function getAudioTranscription(context: Client, deploymentName: string, fileContent: Uint8Array, options?: GetAudioTranscriptionOptions): Promise<AudioResultSimpleJson>;
/**
 * Returns the transcription of an audio file.
 * @param context - The context containing the client to use for this request.
 * @param deploymentName - The name of the model deployment (when using Azure OpenAI) or model name (when using non-Azure OpenAI) to use for this request.
 * @param fileContent - The content of the audio file to transcribe.
 * @param format - The format of the result object. See {@link AudioResultFormat} for possible values.
 * @param options - The options for this audio transcription request.
 * @returns The audio transcription result in a format of your choice.
 */
export declare function getAudioTranscription<Format extends AudioResultFormat>(context: Client, deploymentName: string, fileContent: Uint8Array, format: Format, options?: GetAudioTranscriptionOptions): Promise<AudioResult<Format>>;
/**
 * Returns the translation of an audio file.
 * @param context - The context containing the client to use for this request.
 * @param deploymentName - The name of the model deployment (when using Azure OpenAI) or model name (when using non-Azure OpenAI) to use for this request.
 * @param fileContent - The content of the audio file to translate.
 * @param options - The options for this audio translation request.
 * @returns The audio translation result.
 */
export declare function getAudioTranslation(context: Client, deploymentName: string, fileContent: Uint8Array, options?: GetAudioTranslationOptions): Promise<AudioResultSimpleJson>;
/**
 * Returns the translation of an audio file.
 * @param context - The context containing the client to use for this request.
 * @param deploymentName - The name of the model deployment (when using Azure OpenAI) or model name (when using non-Azure OpenAI) to use for this request.
 * @param fileContent - The content of the audio file to translate.
 * @param format - The format of the result object. See {@link AudioResultFormat} for possible values.
 * @param options - The options for this audio translation request.
 * @returns The audio translation result.
 */
export declare function getAudioTranslation<Format extends AudioResultFormat>(context: Client, deploymentName: string, fileContent: Uint8Array, format: Format, options?: GetAudioTranslationOptions): Promise<AudioResult<Format>>;
export declare function _getCompletionsSend(context: Client, deploymentId: string, body: CompletionsOptions, options?: GetCompletionsOptions): StreamableMethod<GetCompletions200Response | GetCompletionsDefaultResponse>;
export declare function _getCompletionsDeserialize(result: GetCompletions200Response | GetCompletionsDefaultResponse): Promise<Completions>;
export declare function getCompletionsResult(body: CompletionsOutput & ContentFilterResultsForPromptX): Completions;
/**
 * Gets completions for the provided input prompts.
 * Completions support a wide variety of tasks and generate text that continues from or "completes"
 * provided prompt data.
 */
export declare function getCompletions(context: Client, deploymentId: string, body: CompletionsOptions, options?: GetCompletionsOptions): Promise<Completions>;
export declare function streamCompletions(context: Client, deploymentName: string, prompt: string[], options?: GetCompletionsOptions): Promise<EventStream<Omit<Completions, "usage">>>;
export declare function _getChatCompletionsSend(context: Client, deploymentId: string, body: ChatCompletionsOptions, options?: GeneratedGetChatCompletionsOptions): StreamableMethod<GetChatCompletions200Response | GetChatCompletionsDefaultResponse>;
export declare function _getChatCompletionsDeserialize(result: GetChatCompletions200Response | GetChatCompletionsDefaultResponse): Promise<ChatCompletions>;
export declare function getChatCompletionsResult(body: ChatCompletionsOutput & ContentFilterResultsForPromptX): ChatCompletions;
/**
 * Gets chat completions for the provided chat messages.
 * Completions support a wide variety of tasks and generate text that continues from or "completes"
 * provided prompt data.
 */
export declare function getChatCompletions(context: Client, deploymentName: string, messages: ChatRequestMessageUnion[], options?: GetChatCompletionsOptions): Promise<ChatCompletions>;
export declare function streamChatCompletions(context: Client, deploymentName: string, messages: ChatRequestMessageUnion[], options?: GetChatCompletionsOptions): Promise<EventStream<ChatCompletions>>;
export declare function _getImageGenerationsSend(context: Client, deploymentId: string, body: ImageGenerationOptions, options?: GetImageGenerationsOptions): StreamableMethod<GetImageGenerations200Response | GetImageGenerationsDefaultResponse>;
export declare function _getImageGenerationsDeserialize(result: GetImageGenerations200Response | GetImageGenerationsDefaultResponse): Promise<ImageGenerations>;
/** Creates an image given a prompt. */
export declare function getImageGenerations(context: Client, deploymentId: string, body: ImageGenerationOptions, options?: GetImagesOptions): Promise<ImageGenerations>;
export declare function _getEmbeddingsSend(context: Client, deploymentId: string, body: EmbeddingsOptions, options?: GetEmbeddingsOptions): StreamableMethod<GetEmbeddings200Response | GetEmbeddingsDefaultResponse>;
export declare function _getEmbeddingsDeserialize(result: GetEmbeddings200Response | GetEmbeddingsDefaultResponse): Promise<Embeddings>;
/** Return the embeddings for a given prompt. */
export declare function getEmbeddings(context: Client, deploymentId: string, body: EmbeddingsOptions, options?: GetEmbeddingsOptions): Promise<Embeddings>;
type ContentFilterResultsForPromptX = {
    prompt_filter_results?: Array<ContentFilterResultsForPromptOutput>;
    prompt_annotations?: Array<ContentFilterResultsForPromptOutput>;
};
export {};
//# sourceMappingURL=operations.d.ts.map